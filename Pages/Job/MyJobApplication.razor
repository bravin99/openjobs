@page "/jobs/apply/{jobId:int}"
@inject IJobsService JobsService
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment Environment

<div class="container-fluid mb-2">
    <h1 class="text-center text-uppercase">Submit application for <span>"@ApplyJob.JobTitle"</span> </h1>
</div>

<MudPaper Width="100%" Elevation="0">
    <MudContainer Class="p-3">
        @if (ApplyJob != null)
        {
            <EditForm Model="@NewApplication" ValidationDelay="0" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                    <MudItem>
                        @if (success == true)
                        {
                            @if (!string.IsNullOrEmpty(ReturnedReponse)) 
                            {
                                <MudText Color="Color.Success">@ReturnedReponse</MudText>
                            }
                        }
                        else
                        {
                            <MudText Color="@Color.Error">
                                <ValidationSummary />
                            </MudText>
                        }
                    </MudItem>
                    <MudSelect @bind-Value="NewApplication.EducationLevel" T="EducationLevel" Label="Level of Education" AnchorOrigin="Origin.BottomCenter" Class="mt-3">
                        <MudSelectItem Value="@EducationLevel.PhD" />
                        <MudSelectItem Value="@EducationLevel.Masters" />
                        <MudSelectItem Value="@EducationLevel.Degree" />
                        <MudSelectItem Value="@EducationLevel.Diploma" />
                        <MudSelectItem Value="@EducationLevel.Apprentice" />
                        <MudSelectItem Value="@EducationLevel.Highschool" />
                    </MudSelect>
                    <MudFileUpload Class="mt-3" T="IBrowserFile" Accept=".pdf" OnFilesChanged="UploadFiles" MaximumFileCount="100" SuppressOnChangeWhenInvalid="true">
                        <ButtonTemplate Context="uploadResume">
                            <MudButton HtmlTag="label"
                                    Variant="Variant.Filled"
                                    Color="Color.Primary"
                                    StartIcon="@Icons.Material.Filled.CloudUpload"
                                    for="@uploadResume">
                                Resume (Only .pdf files)
                            </MudButton>
                        </ButtonTemplate>
                    </MudFileUpload>  
                    @if (isLoading)
                    {
                        <p>Progress: @string.Format("{0:P0}", progressPercent)</p>
                    }
                    else
                    {
                        <MudList>
                            @foreach (var file in GetResumefiles)
                            {
                                <MudListItem>
                                    <MudList>
                                        <MudListItem>Name: @file.Name</MudListItem>
                                        <MudListItem>Last modified: @file.LastModified.ToString()</MudListItem>
                                        <MudListItem>Size (bytes): @file.Size</MudListItem>
                                        <MudListItem>Content type: @file.ContentType</MudListItem>
                                    </MudList>
                                </MudListItem>
                            }
                        </MudList>
                    }         
                    <MudItem Class="mt-4">
                        <label for="CoverLetter">Write or paste your cover Letter</label>
                        <ValidationMessage For="@(() => NewApplication.CoverLetter)" />
                        <MarkdownEditor @bind-Value="NewApplication.CoverLetter" EditMode="EditMode.WYSIWYG" />
                    </MudItem>
                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mr-auto ml-auto">Submit Application</MudButton>
                    </MudCardActions>
            </EditForm>
        }
        else
        {
            <MudAlert Severity="Severity.Error" Variant="Variant.Outlined">Sorry, this job does not exist.</MudAlert>
        }
    </MudContainer>
</MudPaper>


@code
{
    [Parameter] public int jobId { get; set; }
    public Job ApplyJob { get; set; } = new Job();
    public JobApplicationDto NewApplication { get; set; } = new JobApplicationDto();
    public string ReturnedReponse = string.Empty;
    public bool success = false;

    private List<IBrowserFile> GetResumefiles = new List<IBrowserFile>();
    private long maxFileSize = 1024 * 30;
    private int maxAllowedFiles = 3;
    private bool isLoading;
    private decimal progressPercent;


    protected override async Task OnInitializedAsync()
    {
        await GetJobToApply();
    }

    async Task GetJobToApply()
    {
        ApplyJob = await JobsService.GetSingleJob(jobId);
    }

    async Task OnValidSubmit()
    {
        var result = await JobsService.ApplyForJob(ApplyJob.Id, NewApplication);
        success = true;
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        GetResumefiles.Clear();
        progressPercent = 0;

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                var trustedFileName = Path.GetRandomFileName();
                var path = Path.Combine(Environment.ContentRootPath,
                    Environment.EnvironmentName, "resume_unsafe_uploads", trustedFileName);
                await using FileStream writeStream = new(path, FileMode.Create);
                using var readStream = file.OpenReadStream(maxFileSize);
                var bytesRead = 0;
                var totalRead = 0;
                var buffer = new byte[1024 * 10];
                while ((bytesRead = await readStream.ReadAsync(buffer)) != 0)
                {
                    totalRead += bytesRead;
                    await writeStream.WriteAsync(buffer, 0, bytesRead);
                    progressPercent = Decimal.Divide(totalRead, file.Size);
                    StateHasChanged();
                }
                GetResumefiles.Add(file);
            }
            catch (Exception exc)
            {
                Console.WriteLine($"File: {file.Name} => Error: {exc.Message}");
            }
        }
        isLoading = false;
    }
}